
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000004ae  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a8  00000000  00000000  00000c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000860  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000239  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000409  00000000  00000000  00001749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000168  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_16>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	aa e0       	ldi	r26, 0x0A	; 10
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	af 30       	cpi	r26, 0x0F	; 15
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  c8:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Timer0>:
	0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 
	};

void Timer0(void)
{
	DDRA = 0xFF;     // 7 6 5 4 3 2 1 0  
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0x0C;	 // 0 0 0 0 1 1	0 0
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	82 b9       	out	0x02, r24	; 2
	DDRF = 0x0C;	 // 0 0 0 0 1 1	0 0
  d8:	80 93 61 00 	sts	0x0061, r24


	TCCR0 = 0x05; 		 // 0 0 0 0 0 1 0 1  128분주  -> 8 us
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 256- 125 ;  // 발생주기 8 us * 125 = 1ms
  e0:	83 e8       	ldi	r24, 0x83	; 131
  e2:	82 bf       	out	0x32, r24	; 50
	TIMSK = 0x01;		 //	overflow interrupt 사용
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	87 bf       	out	0x37, r24	; 55
	sei();				// avr의 전체 interrupt 활성화
  e8:	78 94       	sei
}
  ea:	08 95       	ret

000000ec <Time>:
void Time (void)
{
	


}
  ec:	08 95       	ret

000000ee <Fnd>:

void Fnd (void)
{
	tick0++;
  ee:	80 91 0b 01 	lds	r24, 0x010B
  f2:	90 91 0c 01 	lds	r25, 0x010C
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 0c 01 	sts	0x010C, r25
  fc:	80 93 0b 01 	sts	0x010B, r24

	if ( tick0 == 1000)
 100:	80 91 0b 01 	lds	r24, 0x010B
 104:	90 91 0c 01 	lds	r25, 0x010C
 108:	23 e0       	ldi	r18, 0x03	; 3
 10a:	88 3e       	cpi	r24, 0xE8	; 232
 10c:	92 07       	cpc	r25, r18
 10e:	d1 f4       	brne	.+52     	; 0x144 <Fnd+0x56>
	{
		tick0 = 0;
 110:	10 92 0c 01 	sts	0x010C, r1
 114:	10 92 0b 01 	sts	0x010B, r1
		sec++;
 118:	80 91 0e 01 	lds	r24, 0x010E
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 0e 01 	sts	0x010E, r24
		if( sec == 60)
 122:	80 91 0e 01 	lds	r24, 0x010E
 126:	8c 33       	cpi	r24, 0x3C	; 60
 128:	39 f4       	brne	.+14     	; 0x138 <Fnd+0x4a>
		{
			sec=0; 
 12a:	10 92 0e 01 	sts	0x010E, r1
			min++;
 12e:	80 91 0d 01 	lds	r24, 0x010D
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 0d 01 	sts	0x010D, r24
		}
		if(min == 60)
 138:	80 91 0d 01 	lds	r24, 0x010D
 13c:	8c 33       	cpi	r24, 0x3C	; 60
 13e:	11 f4       	brne	.+4      	; 0x144 <Fnd+0x56>
		{
			min = 0;
 140:	10 92 0d 01 	sts	0x010D, r1
		}


	}
	
	PORTE = 0x00; 
 144:	13 b8       	out	0x03, r1	; 3
	PORTF = 0x00;
 146:	10 92 62 00 	sts	0x0062, r1
	
	if  (count == 0 ) 
 14a:	80 91 0a 01 	lds	r24, 0x010A
 14e:	88 23       	and	r24, r24
 150:	69 f4       	brne	.+26     	; 0x16c <Fnd+0x7e>
	{
		PORTA = segTable[sec % 10]; 
 152:	80 91 0e 01 	lds	r24, 0x010E
 156:	6a e0       	ldi	r22, 0x0A	; 10
 158:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 15c:	e9 2f       	mov	r30, r25
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	8b bb       	out	0x1b, r24	; 27
		PORTF = 0x04;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	10 c0       	rjmp	.+32     	; 0x18c <Fnd+0x9e>
	}
    else if (count == 1)
 16c:	80 91 0a 01 	lds	r24, 0x010A
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	79 f4       	brne	.+30     	; 0x192 <Fnd+0xa4>
	{
	 	PORTA =segTable[sec / 10 ] ;
 174:	80 91 0e 01 	lds	r24, 0x010E
 178:	6a e0       	ldi	r22, 0x0A	; 10
 17a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	8b bb       	out	0x1b, r24	; 27
		PORTF =0x08;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	80 93 62 00 	sts	0x0062, r24
 190:	22 c0       	rjmp	.+68     	; 0x1d6 <Fnd+0xe8>
	}
	else if (count == 2)
 192:	80 91 0a 01 	lds	r24, 0x010A
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	69 f4       	brne	.+26     	; 0x1b4 <Fnd+0xc6>
	{
	 	PORTA =segTable[min % 10 ] ;
 19a:	80 91 0d 01 	lds	r24, 0x010D
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 1a4:	e9 2f       	mov	r30, r25
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	8b bb       	out	0x1b, r24	; 27
		PORTE =0x04;
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	10 c0       	rjmp	.+32     	; 0x1d4 <Fnd+0xe6>
	}
	else if (count == 3)
 1b4:	80 91 0a 01 	lds	r24, 0x010A
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <Fnd+0xe8>
	{
	 	PORTA =segTable[min / 10 ];
 1bc:	80 91 0d 01 	lds	r24, 0x010D
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 1c6:	e8 2f       	mov	r30, r24
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	80 81       	ld	r24, Z
 1d0:	8b bb       	out	0x1b, r24	; 27
		PORTE =0x08;
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	83 b9       	out	0x03, r24	; 3
	}

	count = ++count % 4;
 1d6:	80 91 0a 01 	lds	r24, 0x010A
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 0a 01 	sts	0x010A, r24
 1e0:	83 70       	andi	r24, 0x03	; 3
 1e2:	80 93 0a 01 	sts	0x010A, r24

}
 1e6:	08 95       	ret

000001e8 <lcdReadCommand>:

char lcdReadCommand(void)
{
 char data; 

 DDRB = 0x00;
 1e8:	17 ba       	out	0x17, r1	; 23

 PORTG &= ~(1<<LCD_RS);
 1ea:	e5 e6       	ldi	r30, 0x65	; 101
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	80 83       	st	Z, r24
 PORTG |=  (1<<LCD_RW);
 1f4:	80 81       	ld	r24, Z
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	80 83       	st	Z, r24
 PORTG |=  (1<<LCD_E);
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
 
 data = LCD_IN;
 200:	86 b3       	in	r24, 0x16	; 22

 PORTG &= ~(1<<LCD_E);
 202:	90 81       	ld	r25, Z
 204:	9b 7f       	andi	r25, 0xFB	; 251
 206:	90 83       	st	Z, r25

 return data;

}
 208:	08 95       	ret

0000020a <lcdWriteCommand>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	ef e9       	ldi	r30, 0x9F	; 159
 20c:	ff e0       	ldi	r31, 0x0F	; 15
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcdWriteCommand+0x4>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcdWriteCommand+0xa>
 214:	00 00       	nop
{
// while(lcdReadCommand() & 0x80);
 
 _delay_ms(1);

 DDRB = 0xFF;
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	97 bb       	out	0x17, r25	; 23

 PORTG &= ~(1<<LCD_RS);
 21a:	e5 e6       	ldi	r30, 0x65	; 101
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	9e 7f       	andi	r25, 0xFE	; 254
 222:	90 83       	st	Z, r25
 PORTG &= ~(1<<LCD_RW);
 224:	90 81       	ld	r25, Z
 226:	9d 7f       	andi	r25, 0xFD	; 253
 228:	90 83       	st	Z, r25
 LCD_DATA = cmd;
 22a:	88 bb       	out	0x18, r24	; 24

 PORTG |= (1<<LCD_E);
 22c:	80 81       	ld	r24, Z
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	80 83       	st	Z, r24
 PORTG &= ~(1<<LCD_E);
 232:	80 81       	ld	r24, Z
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	80 83       	st	Z, r24
}
 238:	08 95       	ret

0000023a <lcdReadData>:

char lcdReadData(void)
{
 char data; 

 DDRB = 0x00;
 23a:	17 ba       	out	0x17, r1	; 23

 PORTG |= (1<<LCD_RS);
 23c:	e5 e6       	ldi	r30, 0x65	; 101
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	81 60       	ori	r24, 0x01	; 1
 244:	80 83       	st	Z, r24
 PORTG |= (1<<LCD_RW);
 246:	80 81       	ld	r24, Z
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	80 83       	st	Z, r24
 PORTG |= (1<<LCD_E);
 24c:	80 81       	ld	r24, Z
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	80 83       	st	Z, r24
 
 data = LCD_IN;
 252:	86 b3       	in	r24, 0x16	; 22

 PORTG &= ~(1<<LCD_E);
 254:	90 81       	ld	r25, Z
 256:	9b 7f       	andi	r25, 0xFB	; 251
 258:	90 83       	st	Z, r25

 return data;

}
 25a:	08 95       	ret

0000025c <lcdWriteData>:
 25c:	ef e1       	ldi	r30, 0x1F	; 31
 25e:	fe e4       	ldi	r31, 0x4E	; 78
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcdWriteData+0x4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcdWriteData+0xa>
 266:	00 00       	nop
{
// while(lcdReadCommand() & 0x80);

 _delay_ms(5);

 DDRB = 0xFF;
 268:	9f ef       	ldi	r25, 0xFF	; 255
 26a:	97 bb       	out	0x17, r25	; 23

 PORTG |= (1<<LCD_RS);
 26c:	e5 e6       	ldi	r30, 0x65	; 101
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	91 60       	ori	r25, 0x01	; 1
 274:	90 83       	st	Z, r25
 PORTG &= ~(1<<LCD_RW);
 276:	90 81       	ld	r25, Z
 278:	9d 7f       	andi	r25, 0xFD	; 253
 27a:	90 83       	st	Z, r25
 LCD_DATA = data;
 27c:	88 bb       	out	0x18, r24	; 24
 PORTG |= (1<<LCD_E);
 27e:	80 81       	ld	r24, Z
 280:	84 60       	ori	r24, 0x04	; 4
 282:	80 83       	st	Z, r24
 PORTG &= ~(1<<LCD_E);
 284:	80 81       	ld	r24, Z
 286:	8b 7f       	andi	r24, 0xFB	; 251
 288:	80 83       	st	Z, r24
}
 28a:	08 95       	ret

0000028c <lcdInit>:
void lcdInit(void)
{
 DDRB = 0xFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	87 bb       	out	0x17, r24	; 23
 DDRG = 0x07;
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	80 93 64 00 	sts	0x0064, r24
 296:	8f e5       	ldi	r24, 0x5F	; 95
 298:	9a ee       	ldi	r25, 0xEA	; 234
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcdInit+0xe>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcdInit+0x14>
 2a0:	00 00       	nop

 _delay_ms(15);
 lcdWriteCommand(0x38);
 2a2:	88 e3       	ldi	r24, 0x38	; 56
 2a4:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 2a8:	af e1       	ldi	r26, 0x1F	; 31
 2aa:	be e4       	ldi	r27, 0x4E	; 78
 2ac:	11 97       	sbiw	r26, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcdInit+0x20>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcdInit+0x26>
 2b2:	00 00       	nop
 _delay_ms(5);
 lcdWriteCommand(0x38);
 2b4:	88 e3       	ldi	r24, 0x38	; 56
 2b6:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	91 ee       	ldi	r25, 0xE1	; 225
 2be:	a4 e0       	ldi	r26, 0x04	; 4
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	a0 40       	sbci	r26, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <lcdInit+0x34>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcdInit+0x3e>
 2ca:	00 00       	nop
 _delay_ms(100);
 lcdWriteCommand(0x38);
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 lcdWriteCommand(0x08);
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 lcdWriteCommand(0x01);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 lcdWriteCommand(0x06);
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
 lcdWriteCommand(0x0C);
 2e4:	8c e0       	ldi	r24, 0x0C	; 12
 2e6:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>

}
 2ea:	08 95       	ret

000002ec <lcdString>:

void lcdString(char *str)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ec 01       	movw	r28, r24
	while(*str)		lcdWriteData(*str++);
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <lcdString+0xc>
 2f4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcdWriteData>
 2f8:	89 91       	ld	r24, Y+
 2fa:	88 23       	and	r24, r24
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <lcdString+0x8>

}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <lcdGotoXY>:

void lcdGotoXY(char x, char y)
{
	lcdWriteCommand(0x80 | x | (y * 0x40));
 304:	62 95       	swap	r22
 306:	66 0f       	add	r22, r22
 308:	66 0f       	add	r22, r22
 30a:	60 7c       	andi	r22, 0xC0	; 192
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	86 2b       	or	r24, r22
 310:	0e 94 05 01 	call	0x20a	; 0x20a <lcdWriteCommand>
} 
 314:	08 95       	ret

00000316 <lcdNumber>:

void lcdNumber(unsigned char num)
{
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	0f 92       	push	r0
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	08 2f       	mov	r16, r24
	lcdWriteData(num / 100 + 0x30);				// 백의 자리
 326:	64 e6       	ldi	r22, 0x64	; 100
 328:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	99 83       	std	Y+1, r25	; 0x01
 330:	0e 94 2e 01 	call	0x25c	; 0x25c <lcdWriteData>
	lcdWriteData(((num % 100) / 10) + 0x30);	// 십의 자리
 334:	1a e0       	ldi	r17, 0x0A	; 10
 336:	99 81       	ldd	r25, Y+1	; 0x01
 338:	89 2f       	mov	r24, r25
 33a:	61 2f       	mov	r22, r17
 33c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	0e 94 2e 01 	call	0x25c	; 0x25c <lcdWriteData>
	lcdWriteData((num % 10) + 0x30);			// 일의 자리 
 346:	80 2f       	mov	r24, r16
 348:	61 2f       	mov	r22, r17
 34a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodqi4>
 34e:	89 2f       	mov	r24, r25
 350:	80 5d       	subi	r24, 0xD0	; 208
 352:	0e 94 2e 01 	call	0x25c	; 0x25c <lcdWriteData>
}
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <lcdTimer>:
void lcdTimer(void)
{
	


}
 362:	08 95       	ret

00000364 <__vector_16>:
} 



ISR(TIMER0_OVF_vect) // 모든 인터럽트 이름은 ISR이라는 명칭을 갖는다. () <- 안에 인터럽트 백터번호가 들어간다.
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	0b b6       	in	r0, 0x3b	; 59
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	TCNT0 = 256- 125 ; // 반드시 초기화 해준다.
 38a:	83 e8       	ldi	r24, 0x83	; 131
 38c:	82 bf       	out	0x32, r24	; 50
	tick0++;
 38e:	80 91 0b 01 	lds	r24, 0x010B
 392:	90 91 0c 01 	lds	r25, 0x010C
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	90 93 0c 01 	sts	0x010C, r25
 39c:	80 93 0b 01 	sts	0x010B, r24

	Fnd();
 3a0:	0e 94 77 00 	call	0xee	; 0xee <Fnd>
	

}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0b be       	out	0x3b, r0	; 59
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <main>:



int main(void)
{  
  Timer0();
 3ca:	0e 94 68 00 	call	0xd0	; 0xd0 <Timer0>
  lcdInit();
 3ce:	0e 94 46 01 	call	0x28c	; 0x28c <lcdInit>
  lcdGotoXY(0, 0);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	0e 94 82 01 	call	0x304	; 0x304 <lcdGotoXY>
//  unsigned char num = 250;

//  lcdNumber(num);

  while(1)
  {	lcdString(num0);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcdString>
	Timer0();
 3e2:	0e 94 68 00 	call	0xd0	; 0xd0 <Timer0>
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9c e9       	ldi	r25, 0x9C	; 156
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x20>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x26>
 3f0:	00 00       	nop
 3f2:	f3 cf       	rjmp	.-26     	; 0x3da <main+0x10>

000003f4 <__udivmodqi4>:
 3f4:	99 1b       	sub	r25, r25
 3f6:	79 e0       	ldi	r23, 0x09	; 9
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__udivmodqi4_ep>

000003fa <__udivmodqi4_loop>:
 3fa:	99 1f       	adc	r25, r25
 3fc:	96 17       	cp	r25, r22
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__udivmodqi4_ep>
 400:	96 1b       	sub	r25, r22

00000402 <__udivmodqi4_ep>:
 402:	88 1f       	adc	r24, r24
 404:	7a 95       	dec	r23
 406:	c9 f7       	brne	.-14     	; 0x3fa <__udivmodqi4_loop>
 408:	80 95       	com	r24
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
